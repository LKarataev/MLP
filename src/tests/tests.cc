#include "../model/graphnetwork/graphnetwork.cc"
#include "../model/graphnetwork/graphneuron.cc"
#include "../model/matrixnetwork/matrixnetwork.cc"
#include "../model/matrixnetwork/matrixneuron.cc"
#include "../model/utils/utils.cc"
#include "gtest/gtest.h"

std::pair<int, std::vector<double>> ParseLine(const std::string& line) {
  std::istringstream iss(line);
  std::string token;
  std::getline(iss, token, ',');
  int letter = std::stoi(token);
  std::vector<double> data(s21::utils::kInputSize);
  for (int i = 0; i < s21::utils::kInputSize; ++i) {
    std::getline(iss, token, ',');
    data[i] = std::stod(token) / 255.0;
  }
  return {letter, data};
}

TEST(MLP_Matrix_Test, Matrix4) {
  s21::MatrixNetwork matrix(4);
  matrix.LoadWeights("tests/matrix_4_5_5.wgts");
  std::string input =
      "11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,"
      "34,126,108,2,0,0,0,0,0,2,5,32,37,32,5,4,0,0,0,0,2,4,5,21,51,114,129,172,"
      "234,252,202,4,0,0,0,0,0,65,127,204,217,204,129,114,39,37,37,37,82,126,"
      "129,172,222,246,250,249,234,171,78,0,0,0,0,0,3,172,203,129,127,172,222,"
      "245,250,250,250,250,244,222,217,217,217,216,127,51,21,2,0,0,0,0,0,0,0,"
      "32,32,5,4,21,51,127,216,225,255,253,165,89,75,59,42,39,8,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,8,118,254,251,247,246,249,234,216,159,22,3,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,5,129,236,146,127,129,205,234,252,247,171,79,1,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,204,172,21,0,0,4,21,82,128,234,246,123,"
      "3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,222,127,5,0,0,0,0,2,6,155,233,231,36,1,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,139,246,51,0,0,0,0,0,0,0,3,36,219,219,91,0,0,"
      "0,0,0,0,0,0,0,0,0,0,17,205,245,32,0,0,0,0,0,0,0,0,1,96,250,207,8,0,0,0,"
      "0,0,0,0,0,0,0,11,135,247,171,3,0,0,0,0,0,0,0,0,0,7,176,247,52,1,0,0,0,0,"
      "0,0,0,0,1,91,221,220,79,0,0,0,0,0,0,0,0,0,0,0,84,233,159,20,0,0,0,0,0,0,"
      "0,3,91,246,246,79,3,0,0,0,0,0,0,0,0,0,0,0,21,172,218,39,0,0,0,0,0,0,4,"
      "67,221,246,163,8,0,0,0,0,0,0,0,0,0,0,0,0,4,116,233,82,0,0,0,0,3,34,171,"
      "234,221,79,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,246,140,0,0,0,0,77,175,243,"
      "220,91,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,249,191,3,0,0,0,75,124,46,9,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,246,129,0,0,0,0,2,4,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,51,241,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,66,187,204,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "125,247,127,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,123,20,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_EQ(normalize_input.first, matrix.Classify(normalize_input.second));
}

TEST(MLP_Matrix_Test, Matrix5) {
  s21::MatrixNetwork matrix(5);
  matrix.LoadWeights("tests/matrix_5_5_10.wgts");
  std::string input =
      "6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,20,32,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,20,153,200,91,10,0,0,0,0,0,2,4,4,4,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,32,202,252,221,122,19,0,0,4,22,82,125,127,113,32,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,9,140,250,254,219,69,37,51,115,172,232,249,250,242,125,8,0,"
      "0,0,0,0,0,0,0,0,0,0,0,5,129,250,254,249,222,217,222,245,252,254,254,253,"
      "250,157,16,0,0,0,0,0,0,0,0,0,0,0,8,48,177,252,254,254,254,254,254,254,"
      "252,245,220,185,190,78,3,0,0,0,0,0,0,0,0,0,1,33,126,208,247,254,255,254,"
      "253,239,241,220,172,115,50,26,28,7,0,0,0,0,0,0,0,0,0,0,23,159,244,254,"
      "254,254,254,254,221,109,102,50,21,4,0,0,0,0,0,0,0,0,0,0,0,0,1,33,131,"
      "234,254,254,251,254,254,246,129,11,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,"
      "158,244,253,236,204,159,236,254,238,95,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,34,202,253,252,191,116,83,222,254,245,114,4,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,7,95,234,254,243,115,8,38,217,254,238,94,3,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,34,202,253,246,163,33,1,51,222,254,229,70,1,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,3,84,233,252,177,36,1,4,114,245,254,217,39,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,21,170,251,243,115,4,0,4,127,250,254,215,37,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,50,220,252,179,38,1,0,4,113,242,251,170,21,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,4,115,245,252,192,116,32,0,0,32,126,188,78,3,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,21,172,252,254,252,240,111,3,0,0,8,27,7,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,32,200,249,250,249,218,77,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,7,77,125,127,125,77,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "2,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_EQ(normalize_input.first, matrix.Classify(normalize_input.second));
}

TEST(MLP_Matrix_Test, Save_Load_Weights) {
  s21::MatrixNetwork matrix(3);
  EXPECT_NO_THROW(matrix.SaveWeights("tests/matrix_52_3.wgts"));
  EXPECT_NO_THROW(matrix.LoadWeights("tests/matrix_52_3.wgts"));
}

TEST(MLP_Matrix_Test, MatrixTrain) {
  s21::MatrixNetwork matrix(5);
  matrix.LoadWeights("tests/matrix_5_5_10.wgts");
  std::string input =
      "15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,2,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,5,20,27,"
      "20,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,20,32,38,80,100,80,50,18,"
      "5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,90,158,202,216,233,240,233,218,"
      "110,33,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,35,163,218,243,249,252,253,252,"
      "247,138,50,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,33,90,219,245,252,252,252,"
      "254,254,252,172,82,21,2,0,0,0,0,0,0,0,0,0,0,0,0,4,23,79,159,245,252,247,"
      "235,236,249,254,254,204,114,32,4,0,0,0,0,0,0,0,0,0,0,0,3,67,127,187,234,"
      "251,232,176,104,134,209,246,253,217,127,37,4,0,0,0,0,0,0,0,0,0,0,1,10,"
      "123,195,232,249,244,207,127,51,89,175,234,252,215,125,37,4,0,0,0,0,0,0,"
      "0,0,0,0,7,34,175,231,250,253,220,159,80,28,77,158,227,250,204,114,32,4,"
      "0,0,0,0,0,0,0,0,1,10,47,127,244,253,254,246,128,47,14,33,190,232,248,"
      "249,139,50,9,0,0,0,0,0,0,0,0,0,7,34,95,175,251,254,251,232,83,23,8,38,"
      "214,248,253,245,115,34,4,0,0,0,0,0,0,0,0,0,22,79,159,220,254,254,246,"
      "208,46,9,10,51,222,250,252,233,82,21,2,0,0,0,0,0,0,0,0,1,47,127,207,244,"
      "254,251,232,171,22,6,23,84,233,252,250,222,50,9,0,0,0,0,0,0,0,0,2,20,"
      "159,220,247,254,247,220,159,79,6,23,83,171,251,253,245,203,32,4,0,0,0,0,"
      "0,0,0,0,4,34,202,243,253,254,234,177,96,35,13,48,128,208,253,251,232,"
      "170,21,2,0,0,0,0,0,0,0,0,9,50,220,250,254,254,222,141,54,18,48,100,176,"
      "232,253,244,207,126,8,0,0,0,0,0,0,0,0,4,32,114,245,254,254,254,222,148,"
      "84,99,207,232,245,249,218,163,90,33,0,0,0,0,0,0,0,0,0,4,37,125,249,254,"
      "255,254,236,192,160,179,243,246,235,220,158,90,35,8,0,0,0,0,0,0,0,0,0,4,"
      "37,125,249,254,254,254,249,236,227,234,247,232,188,143,77,33,8,1,0,0,0,"
      "0,0,0,0,0,0,4,32,113,241,249,250,250,249,248,246,243,218,191,127,63,20,"
      "7,1,0,0,0,0,0,0,0,0,0,0,0,7,32,113,125,127,127,127,127,125,114,50,33,19,"
      "5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,32,37,37,37,37,37,37,32,9,4,2,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_NO_THROW(matrix.Train(normalize_input));
}

TEST(MLP_Graph_Test, Graph4) {
  s21::GraphNetwork graph(4);
  graph.LoadWeights("tests/80graph_52_4.wgts");
  std::string input =
      "14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,2,2,0,0,0,0,0,0,0,0,4,9,32,37,37,37,37,37,32,7,0,0,0,0,0,0,0,2,62,"
      "80,39,37,21,9,5,21,37,51,114,140,203,217,217,217,217,217,202,91,10,0,0,"
      "0,0,0,0,3,106,168,129,125,82,51,39,82,125,140,204,222,245,250,250,250,"
      "250,250,243,163,47,5,0,0,0,0,0,4,113,242,250,249,233,222,217,233,249,"
      "250,254,254,254,254,255,255,255,254,254,247,190,32,0,0,0,0,0,0,46,210,"
      "254,254,254,254,254,254,254,254,254,254,254,254,250,250,250,250,250,251,"
      "202,32,0,0,0,0,0,7,53,191,253,254,254,251,233,217,217,217,217,217,217,"
      "203,140,129,127,127,129,157,88,7,0,0,0,0,2,77,206,247,254,250,220,175,"
      "84,39,37,37,37,37,37,32,9,5,4,4,5,16,6,0,0,0,0,0,5,127,249,254,234,144,"
      "77,34,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,172,252,247,159,24,2,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,203,254,234,95,7,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,217,254,217,39,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,32,202,253,222,53,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,7,95,232,247,175,67,6,4,4,4,4,4,4,4,4,5,20,27,7,0,0,0,0,"
      "0,0,0,0,0,0,22,159,245,250,188,129,127,127,127,127,127,127,127,127,129,"
      "170,189,95,20,0,0,0,0,0,0,0,0,0,1,35,163,243,250,250,250,250,250,250,"
      "250,250,250,250,250,252,252,231,120,8,0,0,0,0,0,0,0,0,0,1,33,115,172,"
      "215,217,222,245,252,254,254,254,254,252,250,250,242,145,15,0,0,0,0,0,0,"
      "0,0,0,0,7,34,82,125,127,140,204,233,249,250,250,249,233,217,217,202,88,"
      "6,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,9,34,82,125,127,127,125,82,39,37,32,7,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_EQ(normalize_input.first, graph.Classify(normalize_input.second));
}

TEST(MLP_Graph_Test, Graph5) {
  s21::GraphNetwork graph(5);
  graph.LoadWeights("tests/80graph_52_5.wgts");
  std::string input =
      "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,20,"
      "27,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,33,84,169,190,126,33,"
      "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,47,190,233,251,253,244,163,33,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,67,175,247,254,254,254,254,244,"
      "127,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,122,231,253,254,255,255,254,"
      "251,175,34,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,114,203,254,254,254,253,"
      "254,254,254,243,113,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,145,222,254,253,"
      "228,218,242,254,254,243,113,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,110,232,"
      "249,253,219,126,213,246,254,252,177,34,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,"
      "172,252,254,232,98,91,233,252,254,245,115,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,32,203,254,254,209,54,118,245,254,254,232,82,2,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,37,217,254,250,142,77,188,252,254,252,172,22,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,37,214,232,207,111,177,250,254,254,250,130,5,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,20,138,93,51,119,243,254,255,255,252,173,22,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,1,15,6,4,93,236,254,254,254,254,232,100,32,17,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,53,165,215,222,233,251,253,232,152,75,"
      "2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,81,125,140,173,232,253,250,170,"
      "81,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,9,22,100,230,250,188,108,9,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,111,190,243,218,77,2,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,115,242,243,112,3,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,160,188,51,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,8,92,145,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,33,106,106,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,8,42,112,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,24,"
      "4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_EQ(normalize_input.first, graph.Classify(normalize_input.second));
}

TEST(MLP_Graph_Test, Save_Load_Weights) {
  s21::GraphNetwork graph(3);
  EXPECT_NO_THROW(graph.SaveWeights("tests/4graph_52_3.wgts"));
  EXPECT_NO_THROW(graph.LoadWeights("tests/4graph_52_3.wgts"));
}

TEST(MLP_Graph_Test, GraphTrain) {
  s21::GraphNetwork graph(5);
  graph.LoadWeights("tests/80graph_52_5.wgts");
  std::string input =
      "8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,37,32,7,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,21,229,250,241,113,4,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,50,250,254,250,127,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,4,114,254,255,249,125,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,9,27,"
      "4,1,3,8,129,254,255,238,96,3,0,0,0,0,0,0,0,0,0,0,0,7,46,114,127,127,140,"
      "190,115,64,102,118,191,254,255,250,144,41,21,4,0,0,0,0,0,0,0,0,0,95,221,"
      "251,254,254,254,254,254,251,253,254,254,254,255,254,252,250,233,204,83,"
      "20,0,0,0,0,0,0,0,20,83,170,217,222,249,250,250,250,250,250,252,254,255,"
      "254,254,254,254,254,229,107,0,0,0,0,0,0,0,0,3,21,37,51,125,127,127,127,"
      "127,129,191,254,255,254,236,217,233,244,202,76,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,21,172,254,254,233,84,7,21,32,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,37,215,254,254,204,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "32,203,254,254,129,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,9,140,"
      "254,254,127,4,0,0,0,0,0,0,0,0,0,0,0,0,3,34,111,46,8,0,0,0,0,0,4,127,254,"
      "254,125,4,0,0,0,0,0,0,0,0,0,0,0,2,153,232,253,246,208,129,127,127,114,"
      "50,18,141,254,251,66,4,4,4,4,22,109,66,6,0,0,0,0,3,183,221,246,254,254,"
      "250,250,250,245,220,154,222,254,254,166,97,125,127,127,145,232,188,115,"
      "33,0,0,0,0,4,9,46,127,172,217,234,254,254,254,254,254,255,254,254,253,"
      "254,254,254,254,254,254,252,188,3,0,0,0,0,0,0,5,21,39,95,216,233,249,"
      "250,250,254,254,251,250,250,250,250,250,250,233,214,121,0,0,0,0,0,0,0,0,"
      "0,0,7,38,82,125,127,129,221,250,145,127,127,127,127,127,127,82,38,18,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,99,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  std::pair<int, std::vector<double>> normalize_input = ParseLine(input);
  EXPECT_NO_THROW(graph.Train(normalize_input));
}

TEST(MLP_Utils_Test, Proportion) {
  double res = s21::utils::Proportion(0.444, 0.111);
  EXPECT_NEAR(res, 0.7999999, 0.000001);
}

TEST(MLP_Utils_Test, HarmonicMean) {
  double res = s21::utils::HarmonicMean(0.444, 0.111);
  EXPECT_NEAR(res, 0.1775999, 0.000001);
}

int main(int argc, char** argv) {
  setenv("LC_NUMERIC", "C", 1);
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
